====== MaNGOS on Linux 20230209 ======

List of steps, to make MaNGOS run on Linux. (Version 20230209)\\

If you want to have your MaNGOS WoW-server run on linux, you can follow this guide.\\
Was Fully tested and worked fine as of 2023-01-23.\\

  Text in red like this
is meant to be typed in exactly as it is shown.\\
To copy / paste it is the best and the easiest.\\

Parts that are called <color #d70a53>Extra</color> or <color #d70a53>Optional</color> are things
 that I done on my server because of my own preference, it is not needed per se.\\


===== *** PREPARATIONS: *** =====

To go directly to install MaNGOS, click [[~#install_mangos|here]]\\

==== Get yourself a PC ====
And an USB-stick. Mostly any PC of the last 10 years will do.\\
Connect the PC to the Internet.\\
For the compilation the PC needs to have about 4GB of RAM (more is better),\\
or, if you have ca. 10 to 15GB diskspace and 4GB RAM to spare, you can run it in a VirtualBox.\\
Depending or your experience, Internet-speed and speed of your PC, it will take between 1-2h and a whole afternoon or more.


==== Install Devuan 4 Chimaera ====

There is a manual for installing Devuan: https://www.devuan.org/os/documentation/install-guides/chimaera/install-devuan\\
If you have no experience with installing linux, you can find many more guides on the web.\\
E.g. this one: https://www.ricmedia.com/tutorials/how-to-install-debian-linux\\
It is made for debian, but would also be fine, probably.\\
== Get the .ISO: ==

I chose Devuan 4 Chimaera, since it is most similar to how Debian used to be and I do not plan to use the desktop.\\
Devuan 4 Chimaera is based on Debian 11 Bullseye.\\

https://devuan.org/get-devuan\\
Scroll down to select a mirror and download devuan_chimaera_4.0.0_amd64_netinstall.iso from /Linux/distr/devuan/devuan_chimaera/installer-iso/\\
The netinstall.iso is very small and more is not needed as the server will be running without a desktop.\\
A working Internet-connection is needed to download files for the installation.\\



== Put the .ISO on an UBS-stick. ==

I use https://rufus.ie/en/\\
https://www.balena.io/etcher/ seems also to be popular for this. \\
== Make your PC boot from the USB-stick ==
You might need to get into the setup for that.\\
[DEL], [ENTER], [F1], [F2], [F8] or [F12] might do the trick.

The installer starts, choose Install and your preferred settings for language etc.\\
The setup is mostly self-explanatory.\\
Nearly everywhere there is a default that can be chosen.\\
\\
At the

=== software selection ===
however, make sure to install <color #d70a53>SSH-server</color>, you do not need anything else and can remove the marks for those.\\

When the GRUB bootloader is going to be installed, choose your harddisk, not the usb-stick.\\
Upon 
== reboot ==
, remove the USB-stick, so it will boot from HD.

== login ==
If you use a linux-distibution that uses a desktop, you can open a console.\\
All commands are written as being used by the <color #d70a53>root</color> account.\\
If you want to use another account, make use of [[~#install_sudo|sudo]].\\

==== Install sudo ====

  apt-get install sudo

  usermod -aG sudo <username>

=== Get ip-address ===
Type:
  hostname -I | awk '{print $1}'
or
  ip addr
to find the address of the pc in your network.


===== Prepare for use without monitor =====
(You __can__ skip this if you run this on a machine with a dedicated monitor attached, but I have found it to be very practical to be able to just copy all the commands into my SSH-session and not to type everything there what I have to read here.)\\
If you prefer to run it with a monitor attached, you can can use [Alt]+[F2], [Alt]+[F3], [Alt]+[F4], etc. to open more terminals.\\

\\
Since this setup will run without a monitor attached (headless),\\ 
I will make use of PuTTY, so I can do all the work from my main (windows) machine.\\
https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html\\
I personally prefer kitty: http://www.9bis.net/kitty/files/kitty_portable.exe\\
For this reason the <color #d70a53>SSH-server</color> was installed earlier.\\

== Start PuTTY ==
Fill in your IP-address and the port (22)\\
And click on Open.\\
(If needed: On the left, in the Category section, select Connection / SSH and then SSH protocol version: 2)\\

Now you have a console from where all the rest of the installation will be done.


==== Install screen ====
(You can skip this, but) Screen is a life-saver for when you work remotely, If you start a screen and your connection fails, 
you can pick it back up once you have your connection back.\\
If you were running a long task, (like the compiling below,) it will not be interrupted and can run to completion. \\
Since it will be needed later on in this guide, we might as well install it now, 
right at the beginning and have the benefit of it from the start.\\


  apt-get update
  apt-get install screen
Create screen config file:
  nano .screenrc
FIll it with:
<file>
# An alternative hardstatus to display a bar at the bottom listing the
# windownames and highlighting the current windowname in blue. (This is only
# enabled if there is no hardstatus setting for your terminal)
termcapinfo xterm|xterms|xs|rxvt ti@:te@
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %c "
</file>
(Save with [Ctrl]+o , Close with [Ctrl] + x)\\
\\

Now type:
  screen
or:
  screen -S wowinstall
to give your screen a session-name
and you are ready to go.\\
\\
To exit the screen, just type <color #d70a53>exit</color>, to detach, type <color #d70a53>[CTRL] + a</color>, then press <color #d70a53>d</color>.\\
To re-attach to a screen type:
  screen -r
if you have only one screen running, or e.g.
  screen -r wowinstall
to re-attach to a particular screen.\\
Type
  screen -list
to see if you have any screens running. <WRAP round important >
If you are not root, you need to use 
  sudo screen -list 
to see the screens of the root-user.
</WRAP>




==== Prepare SSH for public key authentication ====
*** Semi-optional ***\\
The SSH-connection can be made more secure by using public key authentication:\\
You can skip this if you only use SSH in your local network, but it is much better to prevent the use of normal passwords to log in on SSH.\\
https://www.howtoforge.com/ssh_key_based_logins_putty_p2\\

  mkdir ~/.ssh
  nano ~/.ssh/authorized_keys
(Here you paste your public key)\\
Then save and close and set the permissions right:\\

  chmod 700 ~/.ssh && chmod 600 ~/.ssh/*

Now you can login (also as root) without using a password.\\

==== *** Optional: *** ====
(You can [[~#end_of_optional|Skip]] this, if you want, but I use it on my server.)
  cp /etc/ssh/sshd_config /etc/ssh/sshd_config.org
  nano /etc/ssh/sshd_config
Make the following changes:
  Banner /etc/issue.net
  Subsystem sftp internal-sftp
  PasswordAuthentication no

Now run:
  sshd -t
to test for errors in /etc/ssh/sshd_config\\
When there are no errors, run:
  service ssh restart

  nano /etc/issue.net
(Example:)  
<file>

You have reached private server SERVERNAME.

 Notice:
 ==============================================
   This is a private server.
   All connections are monitored and recorded.
 ==============================================
   Access to this system is not permitted
   unless you have been given permission in
   person by the owner of this system.
   All others must disconnect immediately.
 
   If you have advice to share to improve the
   security or any other aspect of this system
   you can send an email to the following
   addres: YOUR@EMAIL.ADDRESS
  ==============================================

</file>

  nano /etc/motd
<file>

    Welcome to

??????????????????????? ???   ?????????????????? ????   ??? ?????? ????   ????????????
???????????????????????????   ????????????????????????  ???????????????? ?????????????
??????????????  ???????????   ?????????  ?????????????? ????????????????????????????  
??????????????  ???????????? ??????????  ???????????????????????????????????????????  
???????????????????  ??? ??????? ???????????  ?????? ?????????  ?????? ??? ???????????
???????????????????  ???  ?????  ???????????  ??????  ????????  ??????     ???????????
                                                                                      
                                                                   private server

</file>
( Made with http://patorjk.com/software/taag/#p=display&f=ANSI%20Shadow&t=SERVERNAME )
  sshd -t
  service ssh restart

==== *** End of Optional *** ====
===== Installing some tools I like =====
*** Optional but handy ***
[[~#end_of_preparations|(Skip)]]
=== Midnight Commander ===
A handy 2-pane filemanager for the console.
  apt-get install mc 
  
  mc  (and exit again)

  nano ~/.config/mc/ini

change in section <color #22b14c>[Misc]</color> to read:
  timeformat_recent=%F %T
  timeformat_old=%F %T
This will be very helpful when dealing with migrations.\\
=== ntpdate ===
To keep your clock at the right time
  apt-get install ntp ntpdate
(If asked, use : pool.ntp.org)
=== WEBMIN ===
I also like to use Webmin, a handy help for server admins.\\

  nano /etc/apt/sources.list.d/Webmin.list
Fill it with:
  deb http://download.webmin.com/download/repository sarge contrib
  deb http://webmin.mirror.somersettechsolutions.co.uk/repository sarge contrib
Save a copy:
  cp /etc/apt/sources.list.d/Webmin.list /etc/apt/sources.list.d/Webmin.list.save

Install some things needed for Webmin:
  apt-get -qy install curl git
  
  apt-get install smartmontools

  apt-get install lm-sensors
  
  sensors-detect
  
(I used the defaults for every question, except the last one, so it will add the lines automatically.)\\
Then run:
  /etc/init.d/kmod start
  

Get the key:

  apt-get install gnupg
  apt-get install wget
  cd /etc/apt/trusted.gpg.d/
  wget http://www.webmin.com/jcameron-key.asc
  cd ~

Now install:
  apt-get update
  apt-get install webmin
Once installed you can find webmin in your browser at:


<WRAP left round info 20>
  https://<your server's IP>:10000
</WRAP>

\\
\\
\\
\\
\\


== If you can not enter webmin: ==
== Replace webmin self-signed certificate to avoid sec_error_invalid_key error ==
Firefox 33+ no longer supports certificates with private keys smaller than 1024 bits.\\
You can replace your webmin certificate with a new one by running this command:\\
<file>

file=/etc/webmin/miniserv.pem
openssl req -x509 -newkey rsa:2048 -keyout $file  -out $file \
 -days 3650 -nodes -subj \
 "/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com" 
openssl x509 -x509toreq -in $file -signkey $file >> $file
/etc/init.d/webmin restart
</file>

=== Remove a message in cron ===

*** Optional ***
  nano /etc/pam.d/common-session-noninteractive
Look for the following line:
  session required        pam_unix.so
__*Above*__ this line, add the following:
  session     [success=1 default=ignore] pam_succeed_if.so service in cron quiet use_uid
Restart cron:
  service cron restart
===== *** End of PREPARATIONS  *** =====

\\

====== Install MaNGOS ======
==== Clone VMaNGOS ====
core and database from git:\\

  apt-get install git

  cd ~

  git clone -b development https://github.com/vmangos/core vmangos/core

  git clone https://github.com/brotalnia/database vmangos/db
  

To go directly to install the Core, click [[~#core|here]]\\
====== Database ======

==== Install MariaDB ====
If you think of useing MySQL, MySQL was sold to Oracle and all the cool kids now use MariaDB.\\
  apt-get update
  apt-get install mariadb-server
To check if it is running:
  service mariadb status
run
  mysql_secure_installation
to set the root password. You can choose all the defaults.\\
In the examples the database-password is mangos.



===  Create DB structure ===

<file>
echo -e "CREATE DATABASE \`realmd\`;
CREATE DATABASE \`mangos\`;
CREATE DATABASE \`characters\`;
CREATE DATABASE \`logs\`;
CREATE USER 'mangos'@'localhost' IDENTIFIED BY 'mangos';
GRANT USAGE ON *.* TO 'mangos'@'localhost';
GRANT SELECT, EXECUTE, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON \`realmd\`.* TO 'mangos'@'localhost';
GRANT SELECT, EXECUTE, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON \`mangos\`.* TO 'mangos'@'localhost';
GRANT SELECT, EXECUTE, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON \`characters\`.* TO 'mangos'@'localhost';
GRANT SELECT, EXECUTE, SHOW VIEW, ALTER, ALTER ROUTINE, CREATE, CREATE ROUTINE, CREATE TEMPORARY TABLES, CREATE VIEW, DELETE, DROP, EVENT, INDEX, INSERT, REFERENCES, TRIGGER, UPDATE, LOCK TABLES  ON \`logs\`.* TO 'mangos'@'localhost';
FLUSH PRIVILEGES;
" > structure.sql

mysql -u root -pmangos < structure.sql
rm structure.sql
</file>
=== Fill the DB ===
  apt-get update
  apt-get install p7zip-full wget curl
  
  wget https://github.com/brotalnia/database/blob/master/world_full_14_june_2021.7z?raw=true
(I had to add ?raw=true to the filename, or it would not load correctly.)
  mv world_full_14_june_2021.7z?raw=true world_full_14_june_2021.7z

  7z x vmangos/db/world_full_14_june_2021.7z
  mysql -u mangos -pmangos --database=mangos < world_full_14_june_2021.sql
  rm world_full_14_june_2021.sql

  mysql -u mangos -pmangos --database=characters < vmangos/core/sql/characters.sql
  mysql -u mangos -pmangos --database=logs < vmangos/core/sql/logs.sql
  mysql -u mangos -pmangos --database=realmd < vmangos/core/sql/logon.sql

=== realmlist-line ===
This line is to fill the realmlist-table.:
  echo -e "INSERT INTO \`realmd\`.\`realmlist\` (\`name\`, \`address\`, \`localAddress\`, \`localSubnetMask\`, \`realmbuilds\`) VALUES ('$(hostname)', '$(curl https://ipinfo.io/ip 2>/dev/null)', '$(hostname -I | awk '{print $1}')', '$(/sbin/ifconfig eth0 | awk '/netmask/{print $4}')', '5875 6005 6141'); " > realmlist.sql


<WRAP center round tip 100%>

You might need to check <color #d70a53>realmlist.sql</color>:

name:
  $(hostname)
Instead of $(hostname) you can use any name you want for your server.\\
\\
address:
  $(curl https://ipinfo.io/ip 2>/dev/null)
should resolve to your public IPv4 address or you can put your domain-name there, if you want to make it public, if not, set it to your local (lan) ip. \\
\\
localAddress:
  $(hostname -I | awk '{print $1}')
should resolve to your local IPv4 address.\\
\\
localSubnetMask
  $(/sbin/ifconfig eth0 | awk '/netmask/{print $4}
should resolve to your localSubnetMask (usually 255.255.255.0)\\
\\
Check it with nano:
  nano realmlist.sql
or do this later with [[~#heidisql|HeidiSQL]] and just run:
  echo -e "INSERT INTO \`realmd\`.\`realmlist\` (\`name\`, \`address\`, \`localAddress\`, \`localSubnetMask\`, \`realmbuilds\`) VALUES ('VMaNGOS', '127.0.0.1', '127.0.0.1', '255.255.255.0', '5875 6005 6141');
  " > realmlist.sql
</WRAP>

Then type:
  mysql -u mangos -pmangos --database=realmd < realmlist.sql
  rm realmlist.sql

==== Migrations ====

There will most likely be migrations that are updates to the databases and they need to be added.\\


  cd ~/vmangos/core/sql/migrations
  ./merge.sh

For the world_db:
  mysql -u mangos -pmangos --database=mangos < world_db_updates.sql

For the logs_db:
  mysql -u mangos -pmangos --database=logs < logs_db_updates.sql

For the characters_db:
  mysql -u mangos -pmangos --database=characters < characters_db_updates.sql

and lastly the logon_db:
  mysql -u mangos -pmangos --database=realmd < logon_db_updates.sql

  cd ~



====== Core ======
Taken from: https://github.com/vmangos/wiki/wiki/Compiling-on-Ubuntu\\

=== Install dependencies ===

  apt-get install g++

  apt-get install -qq libace-dev
  export ACE_ROOT=/usr/include/ace
  apt-get install -y libtbb-dev
  export TBB_ROOT_DIR=/usr/include/tbb
  apt-get install cmake
You might need:\\
apt-get install libmysqlclient-dev (<= not for Devuan)\\
instead of:\\
  apt-get install default-libmysqlclient-dev

  apt-get install build-essential checkinstall

=== Prepare for compilation ===



  mkdir ~/vmangos/build
  cd ~/vmangos/build

  export ACE_ROOT=/usr/include/ace
  export TBB_ROOT_DIR=/usr/include/tbb

  cmake ~/vmangos/core  -DUSE_EXTRACTORS=0 -DCMAKE_INSTALL_PREFIX=/opt/mangos/

=== Compile ===
This will take a long time, you can work on [[~#heidisql|HeidiSQL]] in the meantime

  export ACE_ROOT=/usr/include/ace
  export TBB_ROOT_DIR=/usr/include/tbb

  make -j4

=== Deploy ===
N.b. <color #d70a53>Make install</color> puts the files in <color #d70a53>/opt/mangos/bin/</color>
  make install
  cd ~

==== Get the dbc-files and the maps etc. ====

<WRAP left round important 99%>
Make sure that you get the dbc-files and the maps, mmaps and vmaps.\\ 
De location of the data directory that contains these must be put in the mangosd.conf file.
(DataDir = )
</WRAP>
\\
\\
If you want to extract the files yourself, you can create the tools for that by setting -DUSE_EXTRACTORS=1 before compilation. (I have not done this myself.)\\
Or you can have a look here: https://github.com/cmangos/issues/wiki/Detailed-installation-guide-for-Microsoft-Windows#more-information\\
But what I choose to do is to use the maps etc. that are in the MaNGOS/data-folder of the windows bropack:\\

  cd ~/vmangos
  mkdir bropack
  cd bropack

https://www.ownedcore.com/forums/world-of-warcraft/world-of-warcraft-emulator-servers/wow-emu-general-releases/613280-elysium-core-1-12-repack-including-mmaps-optional-vendors.html
  apt-get install unrar
(Else Try: <color #d70a53>apt-get install unrar-free</color>)\\
\\
Get the url from the green download-button on this page:\\
https://download2290.mediafire.com/z5a94t9yihug/dwr3wcqx90f9xnm/Vanilla+bropack+v21.rar\\
  wget https://download2290.mediafire.com/z5a94t9yihug/dwr3wcqx90f9xnm/Vanilla+bropack+v21.rar
<WRAP left round info 99%>
This is for bropack21, if there will be a new one, the link needs to be changed accordingly.
</WRAP>


With <color #d70a53>mc</color> you can open the <color #d70a53>.rar-file</color> and copy the whole data-folder 
to <color #d70a53>/opt/mangos</color> it will then end up like: <color #d70a53>/opt/mangos/data</color>\\
This can be faster, or you can run:
  unrar x Vanilla+bropack+v21.rar
then
  mv MaNGOS/data /opt/mangos/data
After this the bropack-folder can be deleted:
  cd ~/vmangos
  rm -r bropack
(I also tested it in a VM with 1(!) core and it takes a looong time. It might be better to do the extraction on your main PC and upload the files to the new server.)\\

==== copy the config-files ====
  cp /opt/mangos/etc/realmd.conf.dist /opt/mangos/etc/realmd.conf
  cp /opt/mangos/etc/mangosd.conf.dist /opt/mangos/etc/mangosd.conf
  
==== Edit conf-files: ====

(This is <color #d70a53>Optional</color>, you can [[~#heidisQL|Skip]] it, but look at it anyway.)\\

<WRAP left round important 99%>
N.B.: The locations of the DataDir and the LogsDir are relative!
</WRAP>
\\

In <color #d70a53>mangosd.conf</color>, the\\
<WRAP left round box 99%>
DataDir = "."\\
LogsDir = ""
</WRAP>
\\
\\

are RELATIVE to the directoty from where <color #d70a53>mangosd</color> was started.\\
So, if you have put the data directory in /opt/mangos/data, and mangosd is in /opt/mangos/bin you should change it to:
  DataDir = "../data"

It might be more clear to use absolute paths, e.g.: \\
<WRAP left round box 99%>
DataDir = "/opt/mangos/data"\\
LogsDir = "/opt/mangos/logs/mangosd"\\
HonorDir = "/opt/mangos/logs/honor"
</WRAP>
That is what I do (see [[~#mangosdconf|below]]).
\\
If you leave it empty (e.g. LogsDir = "") then you will not get any logs.
=== Realmd.conf ===
  nano /opt/mangos/etc/realmd.conf

  LogsDir = "/opt/mangos/logs/realmd"

  LogTimestamp = 1
(Or 0 if you don't want to use timestamps.)
=== Mangosd.conf ===

  nano /opt/mangos/etc/mangosd.conf

  DataDir = "/opt/mangos/data"
  LogsDir = "/opt/mangos/logs/mangosd"
  HonorDir = "/opt/mangos/honor"

Change from 0 to 1 for production server:

  Terrain.Preload.Continents = 1
  Terrain.Preload.Instances  = 1
As long as it is for testing, you can set it to 0, the world-server mangosd will start a lot faster this way.

depending if you want the server to do an automatic restart for Honor-calculation or not.\\
Since there is a nice auto-restarter-script below, you can leave this on 1\\
  AutoHonorRestart = 0 or 1
Since there is a nice auto-restarter-script below, you can leave this on 1\\

  Motd = "Educational project running MaNGOS on Linux."
Or give it some other name as you please. 8-)

<WRAP left round important 20>
Enable soap
</WRAP>
  SOAP.Enabled = 1
It is needed for [[~#uploading_website| website to create accounts]], see below.\\
\\
There are lots of other options that you can change, but to you make the servers run, they can be left as they are.

==== Make the directories: ====
If there are no directories for the log-files, there will be no logs! So make them now.
  mkdir /opt/mangos/logs
  mkdir /opt/mangos/logs/mangosd
  mkdir /opt/mangos/logs/realmd
  mkdir /opt/mangos/logs/honor


The user that runs the servers ([[~#set-up_mangos_user|mangos]] see below) needs to be able to write in the logs-directory:

  chown -R mangos:mangos /opt/mangos/logs
(End of <color #d70a53>Optional</color>)
===== HeidiSQL =====
If you want, you can go to [[~#start_the_login-server| start the login-server]]
unless you need to check the <color #d70a53>realmlist</color>-table.\\
(But you might want to use HeidiSQL later to restore from backups, so install it anyway.)\\
\\
Now that the database is filled and has a user, HeidiSQL can be used to access it:\\
Get it from here: https://www.heidisql.com/download.php\\
(You can do this while the compilation is running)\\

In the Session manager, make a new session and\\ 
on the 1st tab (Settings) change \\
Network type to: <color #d70a53>Mariadb or MySQL (SSH tunnel)</color>\\
User to: <color #d70a53>mangos</color> (This is the Database-User) \\
and Password to: <color #d70a53>mangos</color>\\

On the 2nd tab (SSH tunnel) change\\
plink.exe location: <color #d70a53><to point to the plink.exe file></color>. 
You can get it by clicking on <color #00a2e8>__Download plink.exe__</color>\\
SSH host + port to <color #d70a53><Hostname or IP address of the server machine></color> and <color #d70a53>22</color> (for the port)
(Same as [[~#get_ip-address| above]])\\
User: to <color #d70a53><your user name on the linux machine></color>\\
and Password to <color #d70a53><your password on the linux machine></color>\\
(Or use your public-key like as in putty.)

Click Save and Open.\\

Go to realmd , realmlist and click on the Data tab.\\
Double-click on the ip-address in the address colunm and change it\\
from <color #d70a53>127.0.0.1</color> to <color #d70a53><the IP of the linux machine></color> and press [Enter].\\
Double-click on the netmask in the localSubnetMask colunm and change it\\
from <color #d70a53>255.255.255.0</color> to <color #d70a53><the netmask of the linux machine></color> and press [Enter]. (if needed.)\\
If needed, you can Double-click the <color #d70a53>RealmName (e.g.: VMaNGOS)</color> in the name column and change it to a name you like and press [Enter].\\
Save the changes with: [Ctrl] + [Enter].\\
==== Restoring from backup ====
Have your backups of the characters and the realmd databases ready.
To restore the characters from backup, select the characters database and Click: File, Load SQL file ... [Ctrl] + O, 
and open your characters backup-file. Then press [F9] to import it.\\
Then do the same for the realmd database.

 as shown here:\\

https://kb.bytehouse.co.uk/content/13/299/en/how-to-backup-&-restore-mysql-using-heidisql.html\\
===== Starting the servers for the 1st time =====

==== Start the login-server ====
<file>
cd /opt/mangos/bin
./realmd
</file>
(This terminal-window will stay open.)
If useing screen type <color #d70a53>[CTRL] + a</color>, then <color #d70a53>d</color> .\\

==== And the world-server ====

Open another terminal window (e.g. with [Alt]+[F2]) or, for another screen type:
  screen -S MANGOSD
<file>
cd /opt/mangos/bin
./mangosd
</file>(This terminal-window will stay open)

==== Create a GM account: ====

N.B.! This account is ALSO used in the [[~#uploading_website|website to create accounts]].\\
In the mangosd console type:

  .account create admin admin
  .account set gmlevel admin 6

.account create <name> <password>\\
.account set gmlevel <name> 6 or 3,2,1,0\\

Later you should change the password for something secret, probably... 8-)
  .account set password admin something_secret something_secret
.account set password $account $password $password
==== Login with WoW-client ====
=== Change the realmlist ===
Edit the realmlist.wtf to:
<WRAP center round info 60%>
  set realmlist <the IP-Number of your server>
</WRAP>
, the same as [[~#get_ip-address| above]]\\
Now start up your WoW-client and login with your account-name and password.\\
Congratulate yourself with your new wow-server!

====== Makeing it work nice ======
Ok, now it works, but it is not very elegant to have to keep two console-windows open, in order to keep the server running.\\
Not to mention that we run the server as root (bad practise) and we have to start the server by hand.\\
So close down both windows and read on to learn how to:\\
  * run the server in a dedicated screen
  * start the server on boot-up
  * make automated backups
  * setup a website for account-creation
  * protect the server with a firewall



==== install screen (if not done already) ====
If you skipped this before, click [[~#install_screen|here]] to install and setup (GNU) screen.


==== Set-up mangos user ====

  groupadd mangos -g 202

  useradd -u 202 -g 202 -s /sbin/nologin -c "MaNGOS server daemon" mangos

 <del> chown -R mangos:mangos /opt/mangos  ? </del>

===== MaNGOS server start | stop script (wowadmin) =====




Make the start/stop script:
  nano /opt/mangos/wowadmin
Fill it with:
==== wowadmin script ====

<code bash wowadmin>
#! /bin/bash

# the introduction:
###################################################################################################
# MaNGOS server start | restart | stop script. Version: 2023/02/03-18h23
# Provides a means to (auto-re)start the login- and world-servers while
# giving access to the console and safely run them as a unprivileged user (mangos)
# in one screen that combines windows for both servers and also a task-manager.
#
# Run as root or with sudo.
# Run this script without an argument to see the usage.
#
# It can also do a backup of the server-databases and checks if the servers are running.
###################################################################################################
#
#SETTINGS (with sane defaults):

# The unprivileged user that will run the servers
RUNAS_USER=mangos
# The username of the databaseadmin who can make backups
DATABASEUSER=mangos
# The password of the databaseadmin who can make backups
DATABASEPASSWORD=mangos
# the directory where the backups are stored
DATABASEBACKUPSDIR=/opt/mangos/databasebackups

#Database to be backupped:
# Set to 1 for backup
# or 0 for no backup
CHARACTERS=1
LOGS=0
REALMD=1       ## (a.k.a. loginserver)
MANGOS=0       ## (a.k.a. worldserver)


# The directory that holds your loginserver binary
LOGINSERVER_PATH=/opt/mangos/bin
# The name of your loginserver binary (realmd)
LOGINSERVER_BIN=realmd
# The directory that holds your worldserver binary
WORLDSERVER_PATH=/opt/mangos/bin
# The name of your worldserver binary (mangosd)
WORLDSERVER_BIN=mangosd


# The directory that will hold the restarter's logfiles
RESTARTERLOGS_PATH=/opt/mangos/logs

# The service name of the database server e.g. mariadb
DATABASESERVER=mariadb

# The name for the screen that the servers will run in
SCREEN_NAME=wowserver
# The title for the window that the loginserver runs in
LOGINSERVER_TITLE=Realmd
# The title for the window that the worldserver runs in
WORLDSERVER_TITLE=Mangosd

###################################################################################################
####################### No changes needed below this line #########################################
###################################################################################################

# some variables are needed:
export SHELL=/bin/bash

SCRIPT_FULLPATH=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)/`basename "${BASH_SOURCE[0]}"`
SCRIPT_DIR=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)
SCRIPT_NAME=$(basename "${BASH_SOURCE[0]}")

# screen needs its initialisation file, if it does not exist, it will be created here:
if [[ ! -e /$SCRIPT_DIR/.screenrc ]]; then
cat > /$SCRIPT_DIR/.screenrc << "EOF"
# An alternative hardstatus to display a bar at the bottom listing the
# windownames and highlighting the current windowname in blue. (This is only
# enabled if there is no hardstatus setting for your terminal)
termcapinfo xterm|xterms|xs|rxvt ti@:te@
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %c "
EOF
fi

# the subroutines:
loginserver-restarter()
{
    if [ ! -f $LOGINSERVER_PATH/$LOGINSERVER_BIN ];
    then
        echo $LOGINSERVER_BIN "not found in" $LOGINSERVER_PATH
        exit 1
    fi

    while x=1;
    do
        sudo -u $RUNAS_USER $LOGINSERVER_PATH/$LOGINSERVER_BIN
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $LOGINSERVER_BIN stopped, restarting! | tee -a $RESTARTERLOGS_PATH/$SCRIPT_NAME-$LOGINSERVER_BIN.log
        pid=`ps ax | awk '($5 ~ /$LOGINSERVER_BIN/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

worldserver-restarter()
{
    if [ ! -f $WORLDSERVER_PATH/$WORLDSERVER_BIN ];
    then
        echo $WORLDSERVER_BIN "not found in" $WORLDSERVER_PATH
        exit 1
    fi

    while x=1;
    do
        sudo -u $RUNAS_USER $WORLDSERVER_PATH/$WORLDSERVER_BIN
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $WORLDSERVER_BIN stopped, restarting! | tee -a $RESTARTERLOGS_PATH/$SCRIPT_NAME-$WORLDSERVER_BIN.log
        pid=`ps ax | awk '($5 ~ /$WORLDSERVER_BIN/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

startservers()
{
    if [ "$(screen -ls | grep $SCREEN_NAME)" ]
    then
        echo $SCREEN_NAME is already running
    else
        echo "Starting $SCREEN_NAME"
        screen -c $SCRIPT_DIR/.screenrc -dmS $SCREEN_NAME -t [Tasks]
        sleep 0.5
        screen -S $SCREEN_NAME -p 0 -X stuff "top -u $RUNAS_USER \n"
        sleep 0.5
        screen -S $SCREEN_NAME -X screen -t [$LOGINSERVER_TITLE]
        sleep 0.5
        screen -S $SCREEN_NAME -p 1 -X stuff "cd $LOGINSERVER_PATH\n"
        screen -S $SCREEN_NAME -p 1 -X stuff "$SCRIPT_FULLPATH loginserverstart\n"
        sleep 0.5
        screen -S $SCREEN_NAME -X screen -t [$WORLDSERVER_TITLE]
        sleep 0.5
        screen -S $SCREEN_NAME -p 2 -X stuff "cd $WORLDSERVER_PATH\n"
        screen -S $SCREEN_NAME -p 2 -X stuff "$SCRIPT_FULLPATH worldserverstart\n"
        sleep 0.5
        usage
    fi
}


stopservers()
{
    if [ ! "$(screen -ls | grep $SCREEN_NAME)" ]
    then
        echo There is no $SCREEN_NAME running
    else
        echo "Stopping $SCREEN_NAME"
        screen -S $SCREEN_NAME -X stuff "saveall$(printf \\r)"
        echo "Wait 5 sec. to save all players."
        sleep 5
        pkill $LOGINSERVER_BIN
        pkill $WORLDSERVER_BIN
        ps -ef | grep $SCREEN_NAME | grep -v grep | awk '{print $2}'| xargs kill
        echo $SCREEN_NAME" Terminated"
    fi
}

databasesbackup()
{
    checkdbserver
    checkworldserver
    echo "Making backup...."
    echo "Starting backup."
        if [[ $CHARACTERS == "1" ]];
        then
    /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD characters --single-transaction --quick --lock-tables=false \
    > $DATABASEBACKUPSDIR/$(hostname)_characters_bu-$(date +%Y%m%d_%Hh%M).sql
        fi
        if [[ $LOGS == "1" ]];
        then
    /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD logs --single-transaction --quick --lock-tables=false \
    > $DATABASEBACKUPSDIR/$(hostname)_logs_______bu_$(date +%Y%m%d_%Hh%M).sql
        fi
        if [[ $REALMD == "1" ]];
        then
    /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD realmd --single-transaction --quick --lock-tables=false \
    > $DATABASEBACKUPSDIR/$(hostname)_realmd_____bu_$(date +%Y%m%d_%Hh%M).sql
        fi
        if [[ $MANGOS = "1" ]];
        then
    /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD mangos --single-transaction --quick --lock-tables=false \
    > $DATABASEBACKUPSDIR/$(hostname)_mangos_____bu_$(date +%Y%m%d_%Hh%M).sql
        fi
    echo "Backup finished!"
}

checkservers()
{
    checkdbserver
    checkloginserver
    checkworldserver
}

usage()
{
    echo " "
    echo "Type: wowadmin or screen -r "$SCREEN_NAME
    echo "to access the screens where "$LOGINSERVER_BIN" and "$WORLDSERVER_BIN" are running"
    echo " "
    echo "Type [Ctrl] + a , 0 to switch to the task-window, use k to kill a process."
    echo "Type [Ctrl] + a , 1 to switch to the "$LOGINSERVER_TITLE"-window."
    echo "Type [Ctrl] + a , 2 to switch to the "$WORLDSERVER_TITLE"-window."
    echo "Type [Ctrl] + a , d to detach the screen while keeping the servers running."
    echo " "
}

checkdbserver()
{
    echo Checking $DATABASESERVER
    i=`ps -eaf | grep -i $DATABASESERVER |sed '/^$/d' | wc -l`
        if ! [[ $i > 1 ]]
        then
            echo "=>$DATABASESERVER is not running!"
            exit 1
# you can have the database server started by un-commenting the following lines:
#            echo "Starting "$DATABASESERVER
#            service $DATABASESERVER start
#            sleep 10
        else
            echo "=>$DATABASESERVER is running."
        fi
}

checkloginserver()
{
    echo Checking $LOGINSERVER_BIN
    i=`ps -eaf | grep -i $LOGINSERVER_BIN |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$LOGINSERVER_BIN is running."
        else
            echo "=>$LOGINSERVER_BIN is not running."
        fi
}

checkworldserver()
{
    echo Checking $WORLDSERVER_BIN
    i=`ps -eaf | grep -i $WORLDSERVER_BIN |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$WORLDSERVER_BIN is running, wait to save players."
            echo "Saving players... "
            screen -S $SCREEN_NAME -p 2 -X stuff "saveall\n"
            sleep 5
        else
            echo "=>$WORLDSERVER_BIN is not running."
        fi
}

# the script-options:
case "$1" in
    loginserverstart)
        loginserver-restarter
    ;;
    worldserverstart)
        worldserver-restarter
    ;;
    start)
        checkdbserver
        startservers
    ;;
    restart)
        stopservers
        echo "Servers stopped"
        sleep 3
        startservers
    ;;
    stop)
        stopservers
    ;;
    status)
        checkservers
    ;;
    backup)
        databasesbackup
    ;;
    *)
        echo "Usage:"
        echo $SCRIPT_FULLPATH" start|restart|stop|status|backup "
        usage
        screen -list
        read -p "Press [Enter] to connect or [Ctrl] + C to quit."
        screen -r wowserver
    ;;
esac

# the end
exit 0

</code>

=== make it executable: ===

  chmod a+x /opt/mangos/wowadmin
  /opt/mangos/wowadmin start
to see how it works

Or create a symbolic link to it:
  ln -s /opt/mangos/wowadmin /usr/local/bin/wowadmin
and type:
  wowadmin start

===== Automated Backup =====


Create the directory to hold the backups:

  mkdir /opt/mangos/databasebackups
  
<del>  chown -R mangos:mangos /opt/mangos/databasebackups</del> Not needed.


You can now run:
  wowadmin backup
to make a backup of the <color #d70a53>characters</color>, <color #d70a53>logs</color> and <color #d70a53>realmd</color> -databases into the <color #d70a53>/opt/mangos/accountsbackups</color> directory.\\
(See the settings in the top-section of the wowadmin-script.)

===== cron backup =====
To automate the backup, type:
  nano /etc/crontab
and add at the bottom of the file e.g.:
  34 12 * * *     root    /opt/mangos/wowadmin backup
to make the Backup run at: 34 minutes 12 hours : 12h34 on every day of every month.\\
Then restart cron:
  service cron restart
\\
===== Make WoWserver start on boot =====
==== wowservice (daemon) ====
(This is for init.d, the systemd-version is [[~#wowservice_systemd_version|below]].)
  nano /etc/init.d/wowservice

<code bash wowservice>
#! /bin/sh

### BEGIN INIT INFO
# Provides:          wowadmin
# Required-Start:    $local_fs $network mariadb $all
# Required-Stop:     $local_fs mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: WoW-Server administrator
# Description:       Starts | Restarts | Stops the WoW Server
### END INIT INFO

###################################################################

DIR=/opt/mangos      #(directory where the startscript is located)
NAME=wowadmin        #(filename of the startscript)

###################################################################
# No changes needed below this line                               #
###################################################################

# Carry out the specific functions when asked to by the system
case "$1" in
    start)
        echo "Starting "$NAME"..."
        cd $DIR
        ./$NAME start
        sleep 3
    ;;
    restart)
        echo "Stopping "$NAME"..."
        cd $DIR
        ./$NAME stop
        sleep 3
        echo "Starting "$NAME"..."
        cd $DIR
        ./$NAME start
        sleep 3
    ;;
    stop)
        echo "Stopping "$NAME"..."
        cd $DIR
        ./$NAME stop
        sleep 3
    ;;
    *)
        echo "Usage: /etc/init.d/wowservice {start|restart|stop}"
        screen -ls
        exit 1
    ;;
esac

exit 0
</code>

make it executable:
  chmod a+x /etc/init.d/wowservice
Update-rc.d to copy symlinks to all runlevels so that the WoW Server starts on bootup:\\
  update-rc.d wowservice defaults
To enable|disable autostart:
  update-rc.d wowservice enable|disable

Now you can start|restart|stop the service with:
  service wowservice start|restart|stop
This is how the boot-up and shut-down-process do it.\\
You can still use:
  wowadmin start|restart|stop
Like before.\\
Now to test if it works:
  reboot

<WRAP left round tip 20>
This can also be done with webmin, System / Bootup and Shutdown
</WRAP>
 

==== wowservice systemd version =====
<WRAP round info 100%>
(N.B.! This is only needed if you can not use the above version for init.d .
If you have followed this manual completely, you do not need this part.)\\
</WRAP>


create a file called <color #D70751>wowservice.service</color> in <color #D70751>/lib/systemd/system</color> with the following content:

  nano /lib/systemd/system/wowservice.service
<WRAP left round important 20>
Not tested since Linux Mint 19.2 \\
</WRAP>
\\
\\
\\
\\
\\
<code bash wowservice.service>
[Unit]
Description=MaNGOS WoW Server
After=network.target mariadb.service

[Service]
WorkingDirectory=/opt/mangos
User=root
Group=root
Type=forking
ExecStart=/opt/mangos/wowserver start
ExecStop=/opt/mangos/wowserver stop
RestartSec=15
Restart=always

[Install]
WantedBy=multi-user.target

</code>

Refresh the systemd cache with the command:
  systemctl --system daemon-reload
\\
Start | Stop | Restart the server with the command:
  systemctl start | stop |restart wowservice.service
\\
Make it Start | Not Start at boot with the command:
  systemctl enable | disable wowservice.service
\\
Check the status of the sevice with the command:
  systemctl status wowservice.service

\\
===== PHP and Apache=====
=== Install Apache: ===

  apt-get install apache2

and then check in browser:
[[http://yourserver.ip|http://<yourserver_ip>]]\\ 

=== Install php: ===

  apt-get install php php7.4-mysql php7.4-curl php7.4-soap 
\\

<WRAP left round info 99%>
You might need to install:
  apt-get install libapache2-mod-php
separately, but for Devuan it is done automatically.
</WRAP>


Verify the PHP version using the following command:
  php --version
to check if it has: with Zend OPcache

To test, create this file:

  nano /var/www/html/info.php

  <?php
  phpinfo();

and then check in browser:
[[http://yourserver.ip/info.php|http://<yourserver_ip>/info.php]]\\ 
\\

==== Enable SOAP ====

The website now uses SOAP to create accounts, therefore SOAP needs to be enabled in mangosd.conf:
(If not done already in the beginning.)
  nano /opt/mangos/etc/mangosd.conf

  SOAP.Enabled = 1
Restart the server

  /opt/mangos/wowadmin restart
\\

==== Uploading website ====
Together with this manual, I included the files for the simple website that is included in the bropack.\\
If you want, you can put them in the <color #d70a53>/var/www/html</color> -folder.\\
Use a SFTP-program to upload the website. E.g.: https://winscp.net\\



===== TeamSpeak 3 server =====
I thought of including the steps to set up a TeamSpeak server that can run on the same machine, but this is already a very long story and nowadays TS is not so popular as e.g. Discord.
But I happen to like TS better, so, if you want it, let me know.

===== Install ufw firewall =====
  apt-get install ufw
<WRAP left round important 60%>
Be sure to make ufw to <wrap em>allow ssh</wrap> before enableing!
</WRAP>\\
\\
\\
\\
  ufw allow ssh
Check if either of these commands show the ssh is allowed:
  grep '^### tuple' /lib/ufw/user*.rules
  grep '^### tuple' /etc/ufw/user*.rules
Create a setting-file for <color #d70a53>ufw</color> that opens the ports for:
  * login(realmd):3724
  * world(mangosd):8085
  * soap:7878
I have found that if you run the website on the same machine as the MaNGOS-server, you do not need to open the post 7878 for SOAP.
  nano /etc/ufw/applications.d/ufw-wow

<file>
[WOW]
title=MaNGOS WoW server
description=MaNGOS WoW server
ports=3724,7878,8085/tcp
</file>

Add the rules to ufw:
  ufw allow wow
For Webmin:
  ufw allow webmin
For Apache
  ufw allow 'www full'
Now, enable:
  ufw enable
and check all the rules
  ufw status numbered
To disable type:
  ufw disable
UFW will then also not start on boot.


====== The End ======
That was it. You now have a nice wow-server, that you can play on.
If you want to make it public, so your friends can join, there are places to get the information needed for that.
Perhaps I will write up something some time.
