#! /bin/bash

# the introduction:
###################################################################################################
# MaNGOS server start | restart | stop script. Version: 2023/02/17-16h00
# Provides a means to (auto-re)start the login- and world-servers while
# giving access to the console and safely run them as a unprivileged user (mangos)
# in one screen that combines windows for both servers and also a task-manager.
#
# Run as root or with sudo.
# Run this script without an argument to see the usage.
#
# It can also do a backup of the server-databases and checks if the servers are running.
###################################################################################################
#
#SETTINGS (with sane defaults):

# The unprivileged user that will run the servers
RUNAS_USER=mangos
# The username of the databaseadmin who can make backups
DATABASEUSER=mangos
# The password of the databaseadmin who can make backups
DATABASEPASSWORD=mangos
# the directory where the backups are stored
DATABASEBACKUPSDIR=/opt/mangos/databasebackups

#Database to be backupped:
# Set to 1 for backup
# or 0 for no backup
CHARACTERS=1
LOGS=1
REALMD=1
MANGOS=0


# The directory that holds your loginserver binary
LOGINSERVER_DIR=/opt/mangos/bin
# The name of your loginserver binary (realmd)
LOGINSERVER_BIN=realmd
# The directory that holds your worldserver binary
WORLDSERVER_DIR=/opt/mangos/bin
# The name of your worldserver binary (mangosd)
WORLDSERVER_BIN=mangosd


# The directory that will hold the restarter's logfiles
RESTARTERLOGS_DIR=/opt/mangos/logs

# The service name of the database server e.g. mariadb
DATABASESERVER=mariadb

# The name for the screen that the servers will run in
SCREEN_NAME=wowserver
# The title for the window that the loginserver runs in
LOGINSERVER_TITLE=Realmd
# The title for the window that the worldserver runs in
WORLDSERVER_TITLE=Mangosd

###################################################################################################
####################### No changes needed below this line #########################################
###################################################################################################

# some variables are needed:
export SHELL=/bin/bash

SCRIPT_FULLPATH=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)/`basename "${BASH_SOURCE[0]}"`
SCRIPT_DIR=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)
SCRIPT_NAME=$(basename "${BASH_SOURCE[0]}")

# Check if all commands and directories can be found:
if ! command -v $LOGINSERVER_DIR/$LOGINSERVER_BIN &> /dev/null
then
    echo $LOGINSERVER_BIN" could not be found in "$LOGINSERVER_DIR
    exit
fi
if ! command -v $WORLDSERVER_DIR/$WORLDSERVER_BIN &> /dev/null
then
    echo $WORLDSERVER_BIN" could not be found in "$WORLDSERVER_DIR
    exit
fi
if ! command -v $DATABASESERVER &> /dev/null
then
    echo "$DATABASESERVER could not be found."
    exit
fi
if ! command -v mysqldump &> /dev/null
then
    echo "mysqldump could not be found."
    exit
fi
if ! command -v screen &> /dev/null
then
    echo "screen could not be found."
    echo "Please install screen"
    echo "https://en.wikipedia.org/wiki/GNU_Screen"
    exit
fi
if [ ! -d "$DATABASEBACKUPSDIR" ]; then
   echo "$DATABASEBACKUPSDIR does not exist."
   exit
fi
if [ ! -d "$RESTARTERLOGS_DIR" ]; then
   echo "$RESTARTERLOGS_DIR does not exist."
   exit
fi

# screen needs its initialisation file, if it does not exist, it will be created here:
if [[ ! -e /$SCRIPT_DIR/.screenrc ]]; then
cat > /$SCRIPT_DIR/.screenrc << "EOF"
# An alternative hardstatus to display a bar at the bottom listing the
# windownames and highlighting the current windowname in blue. (This is only
# enabled if there is no hardstatus setting for your terminal)
termcapinfo xterm|xterms|xs|rxvt ti@:te@
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %c "
EOF
fi

# the subroutines:
loginserver-restarter()
{
    while I=*
    do
        sudo -u $RUNAS_USER $LOGINSERVER_DIR/$LOGINSERVER_BIN
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $LOGINSERVER_BIN stopped, restarting! | tee -a $RESTARTERLOGS_DIR/$SCRIPT_NAME-$LOGINSERVER_BIN.log
        pid=`ps ax | awk '($5 ~ /$LOGINSERVER_BIN/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

worldserver-restarter()
{
    while I=*
    do
        sudo -u $RUNAS_USER $WORLDSERVER_DIR/$WORLDSERVER_BIN
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $WORLDSERVER_BIN stopped, restarting! | tee -a $RESTARTERLOGS_DIR/$SCRIPT_NAME-$WORLDSERVER_BIN.log
        pid=`ps ax | awk '($5 ~ /$WORLDSERVER_BIN/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

startservers()
{
    if [ "$(screen -ls | grep $SCREEN_NAME)" ]
    then
        echo $SCREEN_NAME is already running
    else
        echo "Starting $SCREEN_NAME"
        screen -c $SCRIPT_DIR/.screenrc -dmS $SCREEN_NAME -t [Tasks]
        sleep 0.5
        screen -S $SCREEN_NAME -p 0 -X stuff "top -u $RUNAS_USER \n"
        sleep 0.5
        screen -S $SCREEN_NAME -X screen -t [$LOGINSERVER_TITLE]
        sleep 0.5
        screen -S $SCREEN_NAME -p 1 -X stuff "cd $LOGINSERVER_DIR\n"
        screen -S $SCREEN_NAME -p 1 -X stuff "$SCRIPT_FULLPATH loginserverstart\n"
        sleep 0.5
        screen -S $SCREEN_NAME -X screen -t [$WORLDSERVER_TITLE]
        sleep 0.5
        screen -S $SCREEN_NAME -p 2 -X stuff "cd $WORLDSERVER_DIR\n"
        screen -S $SCREEN_NAME -p 2 -X stuff "$SCRIPT_FULLPATH worldserverstart\n"
        sleep 0.5
        usage
    fi
}

stopservers()
{
    if [ ! "$(screen -ls | grep $SCREEN_NAME)" ]
    then
        echo There is no $SCREEN_NAME running
    else
        echo "Stopping $SCREEN_NAME"
        screen -S $SCREEN_NAME -X stuff "saveall$(printf \\r)"
        echo "Wait 5 sec. to save all players."
        sleep 5
        pkill $LOGINSERVER_BIN
        pkill $WORLDSERVER_BIN
        ps -ef | grep $SCREEN_NAME | grep -v grep | awk '{print $2}'| xargs kill
        echo $SCREEN_NAME" Terminated"
    fi
}

databasesbackup()
{
    checkdbserver
    checkworldserver
    echo "Starting backup..."
    if [[ $CHARACTERS == "1" ]];
	then
            /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD \
                 characters --single-transaction --quick --lock-tables=false \
                 > $DATABASEBACKUPSDIR/$(hostname)_characters_bu-$(date +%Y%m%d_%Hh%M).sql
    fi
    if [[ $LOGS == "1" ]];
	then
            /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD \
                logs --single-transaction --quick --lock-tables=false \
                > $DATABASEBACKUPSDIR/$(hostname)_logs_______bu_$(date +%Y%m%d_%Hh%M).sql
    fi
    if [[ $REALMD == "1" ]];
	then
            /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD \
                realmd --single-transaction --quick --lock-tables=false \
                > $DATABASEBACKUPSDIR/$(hostname)_realmd_____bu_$(date +%Y%m%d_%Hh%M).sql
    fi
    if [[ $MANGOS = "1" ]];
	then
            /usr/bin/mysqldump --user=$DATABASEUSER --password=$DATABASEPASSWORD \
                mangos --single-transaction --quick --lock-tables=false \
                > $DATABASEBACKUPSDIR/$(hostname)_mangos_____bu_$(date +%Y%m%d_%Hh%M).sql
    fi
    echo "Backup finished!"
}

checkservers()
{
    checkdbserver
    checkloginserver
    checkworldserver
}

usage()
{
    echo " "
    echo "Type: wowadmin or screen -r "$SCREEN_NAME
    echo "to access the screens where "$LOGINSERVER_BIN" and "$WORLDSERVER_BIN" are running"
    echo " "
    echo "Type [Ctrl] + a , 0 to switch to the task-window, use k to kill a process."
    echo "Type [Ctrl] + a , 1 to switch to the "$LOGINSERVER_TITLE"-window."
    echo "Type [Ctrl] + a , 2 to switch to the "$WORLDSERVER_TITLE"-window."
    echo "Type [Ctrl] + a , d to detach the screen while keeping the servers running."
    echo " "
}

checkdbserver()
{
    echo Checking $DATABASESERVER
    i=`ps -eaf | grep -i $DATABASESERVER |sed '/^$/d' | wc -l`
        if ! [[ $i > 1 ]]
        then
            echo "=>$DATABASESERVER is not running!"
            exit 1
# you can have the database server started by un-commenting the following lines:
#            echo "Starting "$DATABASESERVER
#            service $DATABASESERVER start
#            sleep 10
        else
            echo "=>$DATABASESERVER is running."
        fi
}

checkloginserver()
{
    echo Checking $LOGINSERVER_BIN
    i=`ps -eaf | grep -i $LOGINSERVER_BIN |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$LOGINSERVER_BIN is running."
        else
            echo "=>$LOGINSERVER_BIN is not running."
        fi
}

checkworldserver()
{
    echo Checking $WORLDSERVER_BIN
    i=`ps -eaf | grep -i $WORLDSERVER_BIN |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$WORLDSERVER_BIN is running, wait to save players."
            echo "Saving players... "
            screen -S $SCREEN_NAME -p 2 -X stuff "saveall\n"
            sleep 5
        else
            echo "=>$WORLDSERVER_BIN is not running."
        fi
}

# the script-options:
case "$1" in
    loginserverstart)
        loginserver-restarter
    ;;
    worldserverstart)
        worldserver-restarter
    ;;
    start)
        checkdbserver
        startservers
    ;;
    restart)
        stopservers
        echo "Servers stopped"
        sleep 3
        startservers
    ;;
    stop)
        stopservers
    ;;
    status)
        checkservers
    ;;
    backup)
        databasesbackup
    ;;
    *)
        echo " Valid options:"
        echo " $SCRIPT_FULLPATH start|restart|stop|status|backup "
        usage
        screen -list
        echo " "
        read -p " Type Enter to connect or any other key to quit." -n 1 -r
        if [[ ! $REPLY == "" ]]
        then
            echo " Bye!"
            exit 0
        fi
        screen -r $SCREEN_NAME 
        echo " Bye, bye!"
        exit 0
	    ;;
esac

# the end
exit 0
