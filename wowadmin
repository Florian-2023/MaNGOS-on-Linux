#! /bin/bash

# the introduction:
###################################################################################################
# MaNGOS server start | restart | stop script. Version: 2023/03/04-16h00
# Provides a means to (auto-re)start the login- and world-servers while
# giving access to the console and safely run them as a unprivileged user (mangos)
# in one screen that combines windows for both servers and also a task-manager.
#
# Run as root or with sudo.
# Run this script without an argument to see the usage.
#
# It can also do a backup of the server-databases and checks if the servers are running.
###################################################################################################
#
#SETTINGS (with sane defaults):

# To run the servers:
# The unprivileged user that will run the servers
RunAs_User=mangos

# The directory that holds your loginserver binary
LoginServer_Dir=/opt/mangos/bin
# The name of your loginserver binary (realmd)
LoginServer_Bin=realmd
# The directory that holds your worldserver binary
WorldServer_Dir=/opt/mangos/bin
# The name of your worldserver binary (mangosd)
WorldServer_Bin=mangosd

# To make the backups:
# The service name of the database server e.g. mariadb
DatabaseServer=mariadb

# The username of the databaseadmin who can make backups
DatabaseUser=mangos
# The password of the databaseadmin who can make backups
DatabasePassword=mangos
# the directory where the backups will be stored
DatabaseBackups_Dir=/opt/mangos/databasebackups

#Database to be backupped:
# Set to 1 for backup
# or 0 for no backup
characters=1
logs=1
realmd=1
mangos=0


# The directory that will hold the restarter's logfiles
RestarterLogs_Dir=/opt/mangos/logs


# The name for the screen that the servers will run in
Screen_Name=wowserver
# The title for the window that the loginserver runs in
LoginServer_Title=realmd
# The title for the window that the worldserver runs in
WorldServer_Title=mangosd

###################################################################################################
####################### No changes needed below this line #########################################
###################################################################################################

# some variables are needed:
export SHELL=/bin/bash

Script_FullPath=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)/`basename "${BASH_SOURCE[0]}"`
Script_Dir=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd -P)
Script_Name=$(basename "${BASH_SOURCE[0]}")


# This script must be run with sudo or as root.
if [ "$(id -u)" -ne 0 ]
then
    echo " "
    echo " This script will run the server as an unpriveliged user,"
    echo " therefore it has to be run with sudo or as root."
    echo " Please run sudo $Script_FullPath or as root."
    echo " "
    exit 1
fi


# the subroutines:

checksettings()
{
    echo " "
    echo " Please check the settings at the top of this script with an editor "
    echo " and make the necessary changes."
    echo " Then run sudo $Script_FullPath again when ready."
    echo " "
}

loginserver-restarter()
{
    while I=*
    do
        sudo -u $RunAs_User $LoginServer_Dir/$LoginServer_Bin
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $LoginServer_Bin stopped, restarting! | tee -a $RestarterLogs_Dir/$Script_Name-$LoginServer_Bin.log
        pid=`ps ax | awk '($5 ~ /$LoginServer_Bin/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

worldserver-restarter()
{
    while I=1
    do
       sudo -u $RunAs_User $WorldServer_Dir/$WorldServer_Bin
        NOW=$(date +%Y-%m-%d_%Hh%Mm%Ss_%N)
        echo $NOW $WorldServer_Bin stopped, restarting! | tee -a $RestarterLogs_Dir/$Script_Name-$WorldServer_Bin.log
        pid=`ps ax | awk '($5 ~ /$WorldServer_Bin/) { print $1 }'`
        wait $pid
        sleep 3
    done
}

startservers()
{
# screen needs its initialisation file, if it does not exist, it will be created here:
    if [[ ! -e /$Script_Dir/.screenrc ]]; then
        cat > /$Script_Dir/.screenrc << "EOF"
# An alternative hardstatus to display a bar at the bottom listing the
# windownames and highlighting the current windowname in blue. (This is only
# enabled if there is no hardstatus setting for your terminal)
termcapinfo xterm|xterms|xs|rxvt ti@:te@
hardstatus on
hardstatus alwayslastline
hardstatus string "%{.bW}%-w%{.rW}%n %t%{-}%+w %=%{..G} %H %{..Y} %m/%d %c "
EOF
    fi

# Does the RunAs_User exist?
    if [ ! -n "$RunAs_User" ]
    then
        echo " "
        echo " The setting for RunAs_User is left empty. "
        echo " Therefore $Script_Name can not function."
        checksettings
        exit 1
    else
        if !  id -u "$RunAs_User" >/dev/null 2>&1
        then
            clear
            echo " "
            echo " RunAs_User $RunAs_User does not exist!"
            checksettings
            exit 1
        fi
    fi

# Check if the commands can be found:
    if ! command -v $LoginServer_Dir/$LoginServer_Bin &> /dev/null
    then
        clear
        echo " "
        echo " The LoginServer_Bin $LoginServer_Bin could not be found in LoginServer_Dir $LoginServer_Dir"
        checksettings
    exit 1
    fi
    if ! command -v $WorldServer_Dir/$WorldServer_Bin &> /dev/null
    then
        clear
        echo " "
        echo " The WorldServer_Bin $WorldServer_Bin could not be found in WorldServer_Dir $WorldServer_Dir"
        checksettings
        exit 1
    fi
    if ! command -v screen &> /dev/null
    then
        clear
        echo " "
        echo "The Program screen could not be found."
        echo "Please install screen"
        echo "https://en.wikipedia.org/wiki/GNU_Screen"
        exit 1
    fi
    if [ "$(screen -ls | grep $Screen_Name)" ]
    then
        echo " The screen called $Screen_Name is already running"
    else
        echo " Starting $Screen_Name"
        screen -c $Script_Dir/.screenrc -dmS $Screen_Name -t [Tasks]
        sleep 0.5
        screen -S $Screen_Name -p 0 -X stuff "top -u $RunAs_User \n"
        sleep 0.5
        screen -S $Screen_Name -X screen -t [$LoginServer_Title]
        sleep 0.5
        screen -S $Screen_Name -p 1 -X stuff "cd $LoginServer_Dir\n"
        screen -S $Screen_Name -p 1 -X stuff "$Script_FullPath loginserverstart\n"
        sleep 0.5
        screen -S $Screen_Name -X screen -t [$WorldServer_Title]
        sleep 0.5
        screen -S $Screen_Name -p 2 -X stuff "cd $WorldServer_Dir\n"
        screen -S $Screen_Name -p 2 -X stuff "$Script_FullPath worldserverstart\n"
        sleep 0.5
        usage
    fi
}

stopservers()
{
    if [ ! "$(screen -ls | grep $Screen_Name)" ]
    then
        echo There is no $Screen_Name running
    else
        echo " Stopping $Screen_Name"
        screen -S $Screen_Name -X stuff "saveall$(printf \\r)"
        echo " Wait 5 sec. to save all players."
        sleep 5
        pkill $LoginServer_Bin
        pkill $WorldServer_Bin
        ps -ef | grep $Screen_Name | grep -v grep | awk '{print $2}'| xargs kill
        echo " The screen $Screen_Name has been terminated"
    fi
}


databasesbackup()
{
    if [ -z "$DatabaseBackups_Dir" ]
    then
        echo " "
        echo " The setting for DatabaseBackups_Dir is left empty. "
        echo " Therefore $Script_Name will not create any backups."
        checksettings
        exit 1
    fi
    if [ ! -d "$DatabaseBackups_Dir" ]
    then
        echo " "
        echo " The directory $DatabaseBackups_Dir does not exist"
        checksettings
        exit 1
    fi
    if ! command -v mysqldump &> /dev/null
    then
        clear
        echo " "
        echo " The Program mysqldump could not be found."
        echo " It is needed to make backups."
        echo " Please install mysqldump."
        echo " https://mysqldump.guru/how-to-install-and-run-mysqldump.html"
        echo " Then run sudo $Script_FullPath backup again when ready."
        echo " "
        exit 1
    fi
    checkdbserver
    checkworldserver
    User_Exists="$(mysql -uroot -sse "SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '$DatabaseUser')")"
    if [ ! "$User_Exists" = 1 ]; then
        echo " The setting for DatabaseUser is not a valid user! "
        checksettings
        exit 1
    fi
    Backup_Time=$(date +%Y%m%d_%Hh%M)
    echo " Starting the $Backup_Time backup..."
    for s in characters logs realmd mangos
    do
        if [[ ${!s} == "1" ]]
        then
            BackupFileName=$DatabaseBackups_Dir/$(hostname)_$( printf %-10s ${s} | tr ' ' _)_bu-$Backup_Time.sql
            /usr/bin/mysqldump --user=$DatabaseUser --password=$DatabasePassword \
                 ${s} --single-transaction --quick --lock-tables=false > $BackupFileName 
            if [[ ! $? -eq 0 ]];
            then
                echo >&2 " "
                echo " $Backup_Time ${s}-DB backup failed."  | tee -a $RestarterLogs_Dir/$Script_Name-backups.log
                exit 1
            fi
            if [[ ! -e $BackupFileName ]]
            then
                clear
                echo " For some reason (disk full?) $BackupFileName could not be created."
                echo " Please check and then run sudo $Script_FullPath backup again."
                echo " $BackupFileName could not be created."  | tee -a $RestarterLogs_Dir/$Script_Name-backups.log
                exit 1
            fi
            echo " Created $BackupFileName ." | tee -a $RestarterLogs_Dir/$Script_Name-backups.log
        fi
    done
    echo " The $Backup_Time Backup has finished!"
}

checkservers()
{
    checkdbserver
    checkloginserver
    checkworldserver
}

usage()
{
    echo " "
    echo "Type: wowadmin or screen -r "$Screen_Name
    echo "to access the screens where "$LoginServer_Bin" and "$WorldServer_Bin" are running"
    echo " "
    echo "Type [Ctrl] + a , 0 to switch to the task-window, use k to kill a process."
    echo "Type [Ctrl] + a , 1 to switch to the "$LoginServer_Title"-window."
    echo "Type [Ctrl] + a , 2 to switch to the "$WorldServer_Title"-window."
    echo "Type [Ctrl] + a , d to detach the screen while keeping the servers running."
    echo " "
}

checkdbserver()
{
    if [ -z "$DatabaseServer" ]
    then
        echo " "
        echo " The setting for DatabaseServer is left empty. "
        echo " Therefore $Script_Name can not check the DatabaseServer."
    else
        if ! command -v $DatabaseServer &> /dev/null
        then
            #clear
            echo " "
            echo " The DatabaseServer $DatabaseServer could not be found."
            checksettings
            exit 1
        fi
        echo " Checking DatabaseServer $DatabaseServer"
        i=`ps -eaf | grep -i $DatabaseServer |sed '/^$/d' | wc -l`
        if ! [[ $i > 1 ]]
        then
            echo "=>$DatabaseServer is not running!"
            exit 1
        else
            echo "=>$DatabaseServer is running."
        fi
    fi
}

checkloginserver()
{
    echo Checking $LoginServer_Bin
    i=`ps -eaf | grep -i $LoginServer_Bin |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$LoginServer_Bin is running."
        else
            echo "=>$LoginServer_Bin is not running."
        fi
}

checkworldserver()
{
    echo Checking $WorldServer_Bin
    i=`ps -eaf | grep -i $WorldServer_Bin |sed '/^$/d' | wc -l`
        if  [[ $i > 1 ]]
        then
            echo "=>$WorldServer_Bin is running, wait to save players."
            echo "Saving players... "
            screen -S $Screen_Name -p 2 -X stuff "saveall\n"
            sleep 5
        else
            echo "=>$WorldServer_Bin is not running."
        fi
}

if [ ! -n "$RestarterLogs_Dir" ]
then
    echo " "
    echo " The setting for RestarterLogs_Dir is left empty. "
    echo " Therefore $Script_Name will not create any logs."
    echo " "
else
    if [ ! -d "$RestarterLogs_Dir" ]
    then
        echo " "
        echo " The RestarterLogs_Dir $RestarterLogs_Dir does not exist."
        checksettings
       exit
    fi
fi

# the script-options:
case "$1" in
    loginserverstart)
        loginserver-restarter
    ;;
    worldserverstart)
        worldserver-restarter
    ;;
    start)
#        checkdbserver
        startservers
    ;;
    restart)
        stopservers
        echo "Servers stopped"
        sleep 3
        startservers
    ;;
    stop)
        stopservers
    ;;
    status)
        checkservers
    ;;
    backup)
        databasesbackup
    ;;
    *)
        echo " Valid options:"
        echo " $Script_FullPath start|restart|stop|status|backup "
        usage
        screen -list
        echo " "
        read -p " Type Enter to connect or any other key to quit." -n 1 -r
        if [[ ! $REPLY == "" ]]
        then
            echo " Bye!"
            echo " "
        exit 0
        fi
        screen -r $Screen_Name
        if [ $? = 1 ]
        then
            echo " Start $Screen_Name with $Script_FullPath start"
            echo " "
            exit 1
        fi
        echo " (still running...) See ya later!"
        echo " "
    ;;
esac

# the end
exit 0
